#! /bin/bash

MYNAME=$(basename $0)
MYDIR=$(dirname $0)
MYDIR=$(readlink -m "$MYDIR")
VERSION="0.0.1"
VERBOSE=""
LOGFILE="/dev/null"

OPTION_CONTINUOUS=""

START_TIME=$(date)
LAST_TEST_STARTED="-"
LAST_TEST_NAME="-"
LAST_HOST_NAME="-"
LAST_USER_NAME="-"
SUM_STARTED_TESTS=0

cd $MYDIR
source "./utilityfunctions.sh"
[ -f "./htmlfunctions.sh" ] && source "./htmlfunctions.sh"

#
# Prints the help text and exits.
#
function printHelpAndExit()
{
cat <<EOF
Usage:
  $MYNAME [OPTION]... 

  $MYNAME - Runs tests as they appear in the file-system.

  -h, --help         Print this help and exit.
  -v, --version      Print version information and exit.
  --verbose          Print more messages.
  --log-file=FILE    Store all the messages in the given file too.
  --continuous       Continue watching if no schedules found.

EOF
    exit 0
}

ARGS=$(\
    getopt \
        -o hv \
        -l "help,verbose,version,log-file:,continuous" \
        -- "$@")

if [ $? -ne 0 ]; then
    exit 6
fi

eval set -- "$ARGS"
while true; do
    case "$1" in
        -h|--help)
            shift
            printHelpAndExit
            ;;

        --verbose)
            shift
            VERBOSE="true"
            VERBOSE_OPTION="--verbose"
            ;;

        -v|--version)
            shift
            printVersionAndExit
            ;;

        --log-file)
            shift
            LOGFILE=$(readlink -m "$1")
            shift
            ;;
            
        --continuous)
            shift
            OPTION_CONTINUOUS="true"
            ;;

        --)
            shift
            break
            ;;

        *)
            break
            ;;
    esac
done

function pull_on_testhost()
{
    local idle_server=$1

    printVerbose "Install fresh pipscripts to ${idle_server} before starting testing."

    pushd ${PROJECT_S9S_TESTORIGIN_DIR}
    ./install.sh --server=${idle_server}
    popd

    #printVerbose "Pulling in ${idle_server}:${PROJECT_CC_TESTORIGIN_DIR}"

    #ssh -o UserKnownHostsFile=/dev/null \
    #    -o StrictHostKeyChecking=no \
    #    -o LogLevel=quiet \
    #    $idle_server -- "cd ${PROJECT_CC_TESTORIGIN_DIR} && git pull"

    #printVerbose "Pulling in ${idle_server}:${PROJECT_S9S_TESTORIGIN_DIR}"

    #ssh -o UserKnownHostsFile=/dev/null \
    #    -o StrictHostKeyChecking=no \
    #    -o LogLevel=quiet \
    #    $idle_server -- "cd ${PROJECT_S9S_TESTORIGIN_DIR} && git pull"
}

#
# Waits until it finds an idle server, then starts the given test on it.
#
function start_test()
{
    local config_file="$1"
    local idle_server=""
    local testname=""
    local state=""
    local user=""
    local project=""
    local option_s9s=""
    local retcode
    local counter

    printVerbose "Loading '$config_file'..."
    source "$config_file"
    local gitcommit="$githash"

    # 
    # Getting the list of available servers.
    #
    printVerbose "Getting idle test servers"

    let counter=0
    printVerbose "pip-server-control --list --idle"
    idle_server=$(pip-server-control --list --idle | head -n 1)
    if [ -z "$user" ]; then
        user="$USER"
    fi

    if [ "$idle_server" == "" ]; then
        printVerbose "No idle test server available"
        return 6
    fi

    LAST_USER_NAME="$user"

    echo " ---------------------------------"
    echo "   idle_server: $idle_server"
    echo "      testname: $testname"
    echo "         state: $state"
    echo "          user: $user"
    echo "       project: $project"
    echo "    git branch: $gitbranch"
    echo "    git commit: $gitcommit"

    if [ "$project" == "s9s-tools" ]; then
        option_s9s="--s9s"
    fi

    pull_on_testhost $idle_server

    LAST_TEST_STARTED=$(date)
    LAST_TEST_NAME="$testname"
    LAST_HOST_NAME="$idle_server"

    let SUM_STARTED_TESTS+=1

    printVerbose "pip-cmon-test "\
        "$VERBOSE_OPTION "\
        "$option_s9s "\
        "--server=$idle_server "\
        "--test=$testname "\
        "--user=$user "\
        "--git-branch=$gitbranch"\
        "--git-commit=$gitcommit"

    pip-cmon-test \
        $VERBOSE_OPTION \
        $option_s9s \
        --server="$idle_server" \
        --test="$testname" \
        --user="$user" \
        --git-branch="$gitbranch" \
        --git-commit="$gitcommit" &

    # It takes some time till the pip-cmon-test will be started
    # on the choosen host and sets the host status properly.

    sleep 10

    rm -f "$config_file"
}

#
# Lists the schedule files in reverse timestamp order (oldest files first).
#
function schedule_files()
{
    local root_dir="$PROJECT_DATA_ROOT"

    if [ -z "$root_dir" ]; then
        root_dir="/var/lib/test-ui"
    fi

    if [ ! -d "$root_dir" ]; then
        printError "The project root dir '$root_dir' does not exist."
        return 1
    fi

    ls -tr $root_dir/scheduled-tests/*.conf 2>/dev/null
}

function print_report()
{
    #clear
    printf "        Start time: %s\n" "$START_TIME"
    printf "      Current time: %s\n" "$(date)"
    printf " Last test started: %s\n" "$LAST_TEST_STARTED"
    printf "\n"
    printf "    Last test name: %s\n" "$LAST_TEST_NAME"
    printf "         Last user: %s\n" "$LAST_USER_NAME"
    printf "    Last host name: %s\n" "$LAST_HOST_NAME"
    printf "           Started: %'d test(s)\n" "$SUM_STARTED_TESTS"
    printf "\n\n\n"
}

function pull_local_testorigin_source()
{
    pushd "${PROJECT_CC_TESTORIGIN_DIR}"
    git reset --hard HEAD >/dev/null 2>/dev/null
    git pull >/dev/null 2>/dev/null
    popd
    pushd "${PROJECT_S9S_TESTORIGIN_DIR}"
    git reset --hard HEAD >/dev/null 2>/dev/null
    git pull >/dev/null 2>/dev/null
    popd
}

#
# The main function that does some polling by checking the scheduled tests and
# returns once in every round.
#
function process_scheduled_tests()
{
    local config_file
    local config_files=$(schedule_files)

    if [ -z "$config_files" ]; then
        #printVerbose "No tests scheduled."
        sleep 10
        return 0
    fi

    pull_local_testorigin_source

    for config_file in $(schedule_files); do
        printVerbose "*** config_file: $config_file"
        if [ ! -f "$config_file" ]; then
            continue
        elif [ ! -x "$config_file" ]; then
            # Files that are not executable are being created and not yet 
            # ready.
            continue
        fi

        start_test "$config_file"

        print_report
    done
}

if [ "$OPTION_CONTINUOUS" ]; then
    while true; do
        process_scheduled_tests
    done
else 
    process_scheduled_tests
fi

