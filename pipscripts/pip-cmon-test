#! /bin/bash

MYNAME=$(basename $0)
MYDIR=$(dirname $0)
MYDIR=$(readlink -m $MYDIR)
VERSION="0.0.7"
VERBOSE=""
LOGFILE="$HOME/pip-cmon-test.log"
EXITCODE=0
COMMAND_LINE_OPTIONS="$0 $*"

GIT_HASH=""
GIT_BRANCH=""
GIT_AUTHOR=""
GIT_SUBJECT=""
START_EPOCH_TIME="$(date +%s)"

NO_GIT_PULL=""
OPTION_NO_COMPILE=""
OPTION_OS=""
OPTION_KEEP_NODES=""
DO_CLEAN=""

SHUT_DOWN_AFTER=""
SHUT_DOWN_AFTER_OPTION=""

OPTION_TEST_NAME=""
OPTION_VENDOR=""
OPTION_VERSION=""
OPTION_PID=""
OPTION_USER="$USER"
OPTION_GIT_BRANCH=""
OPTION_GIT_COMMIT=""

S9S_OPTION=""

current_test_name=""

SERVER=""
SSH="ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o LogLevel=quiet"

declare -A REMOTE_SERVER_STATE

source $MYDIR/utilityfunctions.sh

pip-host-control --testing --log "--------------------------------------"

function printHelpAndExit()
{
cat <<EOF

Usage:
  $MYNAME [OPTION]...

  $MYNAME - Runs Cmon tests on multiple servers.

  -h, --help              Print this help and exit.
  -v, --version           Print version information and exit.
  --verbose               Print more messages.
  --log-file=FILE         Store all the messages in the given file too.
 
  --user=USERNAME         The name of the user requested the test.
  --server=SERVER         The server or the servers where the tests will run.
  --blades                Set the servers to my blades.
  --all-servers           Try to use all servers we have.

  --pid                   Print the PID of the test script if it is running.
  
  --no-git-pull           Do not execute 'git pull' before the test.
  --no-compile            Do not compile the source, use as it is.
  --keep-nodes            Pass --keep-nodes to tests not to destroy containers.
  --shut-down-after       Shut down the test server after the test.
  --git-branch=BRANCH     The git branch to test.
  --git-commit=HASH       The git commit to test.

  --s9s                   Test the s9s project.
  --test=NAME             The name of the test to run.
  --unit-tests            Run all the unit tests.
  --functional-tests      Run all the functional tests.

  --sqlversion=VERSION    The version to test.
  --vendor=VENDOR         The vendor name to test.
  --os=LIST               The name of the OS to test.

EXAMPLE:
  $MYNAME --server=blade01 --os=debian8 --vendor=mariadb --sqlversion=5.6

  $MYNAME --server=host01,host02 --os=debian7,debian8 --vendor=mariadb,percona,codership --sqlversion="5.6,5.7"
  
  $MYNAME --server=host01,host02 --os=debian7,debian8 --vendor=postgresql --sqlversion="5.6"


EOF

  exit 0
}

ARGS=$(\
    getopt \
        -o hvj: \
        -l "help,verbose,version,log-file:,user:,server:,all-servers,blades,\
pid,\
test:,unit-tests,functional-tests,os:,vendor:,sqlversion:,s9s,\
no-git-pull,no-compile,keep-nodes,shut-down-after,wait,git-branch:,git-commit:" \
        -- "$@")

if [ $? -ne 0 ]; then
    exit 6
fi

eval set -- "$ARGS"
while true; do
    case "$1" in
        -h|--help)
            shift
            printHelpAndExit
            ;;

        --verbose)
            shift
            VERBOSE="true"
            VERBOSE_OPTION="--verbose"
            ;;

        -v|--version)
            shift
            printVersionAndExit
            ;;

        --log-file)
            shift
            LOGFILE=$(readlink -m "$1")
            shift
            ;;

        --keep-nodes)
            shift
            OPTION_KEEP_NODES="--keep-nodes"
            ;;

        --user)
            shift
            OPTION_USER="$1"
            shift
            ;;

        --server)
            shift
            SERVER="$1"
            SERVER=$(echo $SERVER | tr ',' ' ' | tr ';' ' ')
            if [ "x$SERVER" = "x" ]; then
                printError "No server was specified."
                exit 6
            fi
            shift
            ;;

        --blades)
            shift
            if [ -f "$HOME/.pip/blades" ]; then
                SERVER=$(cat "$HOME/.pip/blades" | tr ',' ' ')
            else
                SERVER="blade01 blade02 blade03 blade04 blade05 "
                SERVER+="blade06 blade07 blade08 blade09 blade10"
                echo "$SERVER" >"$HOME/.pip/blades"
            fi
            ;;

        --all-servers)
            shift
            SERVER="host01 host02 host03 host04 host05 host06 host07 "
            SERVER+="blade01 blade02 blade03 blade04 blade05 blade06 "
            SERVER+="blade07 blade08 blade09 blade10"
            ;;

        --pid)
            shift
            OPTION_PID="true"
            ;;

        --s9s)
            shift
            S9S_OPTION="--s9s"
            ;;

        --test)
            shift
            OPTION_TEST_NAME="$1"
            TEST_NAME_OPTION="--test=$OPTION_TEST_NAME"
            shift
            ;;

        --unit-tests)
            shift
            if [ -z "$OPTION_FUNCTIONAL_TESTS" ]; then
                OPTION_UNIT_TESTS="yes"
            else
                printError "The --test and --functional-tests are exclusive."
                exit 6
            fi
            ;;
        
        --functional-tests)
            shift
            if [ -z "$OPTION_TEST_NAME" ]; then
                OPTION_FUNCTIONAL_TESTS="yes"
            else
                printError "The --test and --functional-tests are exclusive."
                exit 6
            fi
            ;;

        --os)
            shift
            OPTION_OS="$1"

            if [ "$OPTION_OS" == "all" ]; then
                OPTION_OS="centos70,centos66,centos64,centos63,centos56,"
                OPTION_OS+="debian6,debian7,debian8,"
                OPTION_OS+="ubuntu1204,ubuntu1404,ubuntu1604"
            fi

            shift
            ;;

        --vendor)
            shift
            OPTION_VENDOR="$1"

            if [ "$OPTION_VENDOR" == "all" ]; then
                OPTION_VENDOR=""
                OPTION_VENDOR+="mysqlcluster_oracle "
                OPTION_VENDOR+="mysql_replication_percona "
                OPTION_VENDOR+="10gen "
                OPTION_VENDOR+="percona "
                OPTION_VENDOR+="mariadb "
                OPTION_VENDOR+="codership "
                OPTION_VENDOR+="postgresql"
            fi

            shift
            ;;
            
        --sqlversion)
            shift
            OPTION_VERSION="$1"
            shift
            ;;

        --no-git-pull)
            shift
            NO_GIT_PULL="true"
            NO_GIT_PULL_OPTION="--no-git-pull"
            ;;

        --no-compile)
            shift
            OPTION_NO_COMPILE="true"
            NO_COMPILE_OPTION="--no-compile"
            ;;

        --shut-down-after)
            shift
            SHUT_DOWN_AFTER="true"
            SHUT_DOWN_AFTER_OPTION="--shut-down-after"
            ;;

        --wait)
            shift
            WAIT_OPTION="--wait"
            ;;

        --git-branch)
            OPTION_GIT_BRANCH="$2"
            shift 2
            ;;

        --git-commit)
            OPTION_GIT_COMMIT="$2"
            shift 2
            ;;

        --)
            shift
            break
            ;;

        *)
            printVerbose "Unhandled option $1"
            printError "Unhandled option $1"
            exit 1
            ;;
    esac
done

#
# This is how we log from this script. Every run truncates the log file.
#
echo "" >$LOGFILE
printVerbose "Starting test runner script..."
printVerbose "              hostname: $(hostname)"
printVerbose "                MYNAME: $MYNAME"
printVerbose "                 MYDIR: $MYDIR"
printVerbose "  COMMAND_LINE_OPTIONS: $COMMAND_LINE_OPTIONS"
printVerbose "       TEST_REPORT_URL: $PROJECT_TEST_REPORT_URL"
printVerbose "     OPTION_GIT_BRANCH: $OPTION_GIT_BRANCH"
printVerbose "     OPTION_GIT_COMMIT: $OPTION_GIT_COMMIT"

#
# The basename of the pip-cmon-test log file on the server.
#
function script_log_file_name()
{
    echo "${OPTION_USER}-$(hostname)-${current_test_name}-${GIT_HASH}.slog"
}

#
# Uploads the log file of this script to the web server.
#
function upload_slog_file()
{
    local localfile="$HOME/pip-cmon-test.log"
    local remotefile="$(script_log_file_name)"

    if [ -f "$localfile" ]; then
        cp "$localfile" "/tmp/$remotefile"
    else
        touch "/tmp/$remotefile"
    fi
        
    #printVerbose "scp \"/tmp/$remotefile\" \"$PROJECT_TEST_REPORT_URL\""
    scp "/tmp/$remotefile" "$PROJECT_TEST_REPORT_URL"
    rm -f "/tmp/$remotefile"
}

#export PATH="$HOME/bin:$PATH"

#
# Prints a message and also sends it to the server so it is made available as
# status string.
#
function message()
{
    printVerbose "$1"
    #pip-host-control --status="$1"
}

function test_name_to_test()
{
    if [ "$OPTION_TEST_NAME" ]; then
        echo "$OPTION_TEST_NAME"
        return 0
    fi

    echo "ft_install"
}

#
# This function prints the version that will be tested.
#
function version_to_test()
{
    local host_name=$(hostname)
   
    #
    # Command line overrules everything.
    #
    if [ "$OPTION_VERSION" ]; then
        echo "$OPTION_VERSION" | tr ',' ' '
        return 0
    fi

    # Lets have 0.0 as default. Later logic don't let this default to be empty 
    echo "0.0"
}

#
# Prints the name of the vendor to test.
#
function vendor_to_test()
{
    local host_name=$(hostname)

    #
    # Command line overrules everything.
    #
    if [ "$OPTION_VENDOR" ]; then
        echo "$OPTION_VENDOR" | tr ',' ' ' | tr ';' ' '
        return 0
    fi

    echo "codership"
}

#
# Prints one or more operatig system name that should be tested.
#
function os_to_test()
{
    local host_name=$(hostname)
   
    #
    # Command line option overrules everything.
    #
    if [ "$OPTION_OS" ]; then
        echo $OPTION_OS | tr ',' ' '
        return 0;
    fi

    echo "ubuntu"
}

#
# Prints the directory name where the clustercontrol source can be found.
#
function find_clustercontrol_source_directory()
{
    local dir_path
    
    dir_path="$HOME/clustercontrol-enterprise"
    if [ -d "$dir_path" ]; then
        echo "$dir_path"
        return 0
    fi

    dir_path="$HOME/Desktop/stuff/work/clustercontrol-enterprise"
    if [ -d "$dir_path" ]; then
        echo "$dir_path"
        return 0
    fi
    
    #
    # Well, we did not find it, but we did not find any others either.
    #
    pip-host-control \
        --error "Could not find clustercontrol source in '$dir_path'."

    echo "$HOME/clustercontrol-enterprise"
}

function find_s9s_source_directory()
{
    local dir_path
    
    dir_path="$HOME/Desktop/stuff/work/s9s-tools"
    if [ -d "$dir_path" ]; then
        echo "$dir_path"
        return 0
    fi
    
    
    dir_path="$HOME/s9s-tools"
    if [ ! -d "$dir_path" ]; then
        pushd "$HOME" >/dev/null 2>/dev/null
        pip-host-control --log "Cloning s9s-tools.git."

        git clone git@github.com:severalnines/s9s-tools.git \
            >/dev/null 2>/dev/null

        popd >/dev/null 2>/dev/null
    fi

    if [ -d "$dir_path" ]; then
        echo "$dir_path"
        return 0
    fi

    
    #
    # Well, we did not find it, but we did not find any others either.
    #
    pip-host-control \
        --error "Could not find s9s source in '$dir_path'."

    echo "$HOME/s9s-tools"
}

function print_title()
{
    echo "<h3>$*</h3>"
}

#
# FIXME: This will be more complicated.
# FIXME: This expects to be in the source directory.
#
function prepare_source()
{
    local package_name="unknown"
    local current_branch
    local requested_branch
    local requested_commit
    local prompt="$USER@$HOSTNAME:$dirname\$"

    while [ -n "$1" ]; do
        case "$1" in 
            --package-name)
                package_name=$2
                shift 2
                ;;

            --requested-branch)
                requested_branch="$2"
                shift 2
                ;;

            --requested-commit)
                requested_commit="$2"
                shift 2
                ;;

            *)
                break
                ;;
        esac
    done

    pip-host-control --status "Preparing source." 

    if [ -z "$NO_GIT_PULL" ]; then
        printVerbose "Pulling source for $package_name."
        pip-host-control \
            --log "Pulling source." \
            --status "Pulling source." 
        
        git reset --hard HEAD >/dev/null 2>/dev/null
        git pull >/dev/null 2>/dev/null

        #
        # Checking the branch.
        #
        current_branch=$(git rev-parse --abbrev-ref HEAD)
        printVerbose "Current branch is '$current_branch'."
       
        if [ -z "$requested_branch" ]; then
            printVerbose "Requested branch is not set, using 'master'."
            requested_branch="master"
        else 
            printVerbose "Requested branch is '$requested_branch'."
        fi

        #if [ "$current_branch" != "$requested_branch" ]; then
        #    printVerbose "$prompt git checkout $requested_branch"
        #    git checkout "$requested_branch" >>$LOGFILE 2>>$LOGFILE
        #fi
        
        printVerbose "$prompt git fetch --all"
        git fetch --all >>$LOGFILE 2>>$LOGFILE

        # always reset any local changes first, then go to master
        printVerbose "$prompt git reset --hard"
        git reset --hard >>$LOGFILE 2>>$LOGFILE

        printVerbose "$prompt git checkout master"
        git checkout master >>$LOGFILE 2>>$LOGFILE

        if [ "$requested_branch" != "master" ]; then
            # first delete any local branch with the same name
            # (as the remote branch might be overwritten from stratch)
            printVerbose "$prompt git branch -d $requested_branch"
            git branch -d $requested_branch >>$LOGFILE 2>>$LOGFILE

            # and lets check out the branch now
            # (it will be re-constructed from remote)
            printVerbose "$prompt git checkout $requested_branch"
            git checkout $requested_branch >>$LOGFILE 2>>$LOGFILE
        fi

        printVerbose "$prompt git pull"
        git pull >>$LOGFILE 2>>$LOGFILE

        if [ ! -z "$requested_commit" ]; then
            printVerbose "$prompt git checkout $requested_commit"
            git checkout $requested_commit >>$LOGFILE 2>>$LOGFILE
        fi
       
        #
        #
        #
        pip-host-control --log "Pulled source."

        # Files are left everywhere... :(
        if [ -d "./tests/configs/tls" ]; then
            rm -rvf "./tests/configs/tls"
        fi
    fi

    if [ "$DO_CLEAN" ]; then
        printVerbose "Cleaning source dir."

        pip-host-control \
            --log "Cleaning source dir." \
            --status "Cleaning source."

        git clean -dfx >/dev/null 2>/dev/null
        pip-host-control --log "Cleaned source."
    fi
}

function find_mysql()
{
    for dir in /opt/mysql-cluster-gpl-7*; do
        if [ -d "$dir" ]; then
            echo "$dir"
            return 0
        fi
    done

    return 1
}

#
# Expects to be in the source directory.
#
function compile_source_dir()
{
    local source_root
    local mysql_dir=$(find_mysql)    
    local do_install

    while [ -n "$1" ]; do
        case "$1" in 
            --source-root)
                source_root="$2"
                shift 2
                ;;

            --install)
                do_install="true"
                shift
                ;;

            *)
                break
                ;;
        esac
    done

    if [ -z "$source_root" ]; then
        printError "The source root is not provided."
        return 1
    fi

    if [ "$mysql_dir" ]; then
        export PATH="$mysql_dir/bin:$PATH"
    fi

    #
    # Finding the source and entering the directory.
    #
    if [ ! -d "$source_root" ]; then
        pip-host-control --error "Directory '$source_root' is not found."
        return 1
    fi

    printVerbose "Entering directory '$source_root'..."
    pip-host-control --log "Entering directory '$source_root'..."
    retcode="$?"

    if [ "$retcode" -ne 0 ]; then
        pip-host-control --error "Could not chdir to '$source_root'."
        return 1
    fi
    
    upload_slog_file

    #
    # Not gonna compile the source when the --no-compile command line option is
    # provided.
    #
    if [ "$OPTION_NO_COMPILE" ]; then
        return 0
    fi
    
    #
    # Running autogen in the source root. 
    #
    if [ ! -f "Makefile" ]; then
        printVerbose "Running autogen.sh."
        pip-host-control \
            --log "Running 'autogen.sh'." \
            --status "Running 'autogen.sh'."

        rm -f autogen.log

        ./autogen.sh >>"autogen.log" 2>>"autogen.log"
        retcode $?
        if [ $retcode -ne 0 ]; then
            printVerbose "Script autogen.sh failed."
            pip-host-control \
                --tail "$PWD/autogen.log" \
                --error "The ./autogen.sh returned an error ($retcode)."
            exit 6
        fi
    fi
    
    #
    # Running make in source root.
    #
    printVerbose "Running 'make'."
    pip-host-control \
        --log "Running 'make'." \
        --status "Running 'make'."

    rm -f "make.log"

    make -j20 >>"make.log" 2>>"make.log"
    retcode=$?
    if [ "$retcode" -ne 0 ]; then
        printVerbose "Program 'make' failed."
        tail -n 24 "make.log" >>$LOGFILE

        pip-host-control \
            --tail "$PWD/make.log" \
            --error "Program make returned an error ($retcode)."

        return 1
    fi

    if [ -n "$do_install" ]; then
        printVerbose "Running 'make install'."
        pip-host-control \
            --log "Running 'make install'." \
            --status "Running 'make install'."

        sudo make install >>"make.log" 2>>"make.log"

        if [ $? -ne 0 ]; then
            printVerbose "Installing with 'make install' failed."
            return 1
        fi
    fi

    return 0
}

function compile_source()
{
    local retcode
    local directory

    printVerbose "Preparing clustercontrol"

    #
    # Compiling the controller.
    # The source is already prepared in advance.
    #
    directory="$(find_clustercontrol_source_directory)"

    pushd "$directory"
    compile_source_dir \
        --source-root "$directory"

    retcode=$?
    popd 
    
    if [ "$retcode" -ne 0 ]; then
        printVerbose "The return code is $retcode..."
        return "$retcode"
    fi

    #
    # Compiling the s9s-tools, the source is not yet prepared.
    #
    if [ -n "$S9S_OPTION" ]; then
        directory=$(find_s9s_source_directory)

        pushd "$directory"
        prepare_source \
            --package-name "s9s-tools"

        compile_source_dir \
            --source-root "$directory" \
            --install 

        retcode="$?"
        popd
    fi

    return "$retcode"
}

function ft_test_ended()
{
    local exit_code="$1"
    local backend_pid="$2"
    local core_file

    echo "The test ended."
    echo "  exit_code: $exit_code"
    echo "         wd: '$PWD'"
    for core_file in \
        *core* \
        */*core* \
        $HOME/clustercontrol-enterprise/*core* \
        $HOME/clustercontrol-enterprise/tests/*core*; 
    do
        if [ ! -f "$core_file" ]; then
            continue
        fi

        pip-host-control --log "Core file found: $core_file"
    done

    if [ ! -f "$core_file" -a "$exit_code" -eq 0 ]; then
        return 0
    fi

    if [ -z "$(which gdb)" ]; then
        pip-host-control --log "Installing gdb."
        sudo apt-get -y --force-yes install gdb
    fi

                
    #echo "<h2>Backtrace</h2>" 
    #echo "<hr>" 

    if [ -n "$backend_pid" -a "$exit_code" -ne 0 ]; then
        pip-host-control --log "Saving backtrace (no crash)"
        sudo gdb \
            -p $backend_pid -batch \
            -ex "thread apply all back" \
            -ex "quit" \
            >>$LOGFILE 2>>$LOGFILE
    
        #sudo gdb -p $backend_pid -batch \
        #    -ex "thread apply all back" \
        #    -ex "quit" 
    elif [ -f "$core_file" ]; then
        pip-host-control --log "Saving backtrace (crash)"
        sudo gdb \
            -batch \
            -ex "thread apply all back" \
            -ex "quit" \
            ft_full/ft_full "$core_file" \
            >>$LOGFILE 2>>$LOGFILE 
    fi
}

#
# $1: test name
#
# The report is a HTML file where we put the report about the test run.
#
function report_file_name()
{
    local test_name=$1
    echo "${OPTION_USER}-$(hostname)-${test_name}-${GIT_HASH}.html"
}

#
# $1: test name
#
function result_file_name()
{
    local test_name=$1
    echo "${OPTION_USER}-$(hostname)-${test_name}-${GIT_HASH}.result"
}

function log_file_name()
{
    local test_name=$1
    echo "${OPTION_USER}-$(hostname)-${test_name}-${GIT_HASH}.log"
}

#
# $1: test name
# $2: the state, "FAILURE", "RUNNING" or "SUCCESS"
# $3: file with the test program output
#
function upload_report_file_ascii()
{
    local report_file=$(report_file_name "$1")
    local tmp_file="/var/tmp/$report_file"

    cat <<EOF >>$tmp_file
    <html>
      <h1>Test results for '$1'</h1>
      <p>This test created no report. Try to check the programs output for
      details. The web interface shows the output when clicked on the test's
      name.</p>
    </html>
EOF

    #printVerbose scp "$tmp_file" "$PROJECT_TEST_REPORT_URL"
    scp "$tmp_file" "$PROJECT_TEST_REPORT_URL"
    rm -f "$tmp_file"
}

#
# $1: test name
# $2: the state, "FAILURE", "RUNNING" or "SUCCESS"
# $3: file with the test program output
#
function upload_result_file()
{
    local test_name
    local test_state
    local result_file
    local log_file
    local tmp_file
    local unit_test_option
    local functional_test_option
    local pid_to_watch
    local counter

    while true; do
        case "$1" in 
            --unit-test)
                shift
                unit_test_option="--unit-test"
                ;;

            --functional-test)
                shift
                functional_test_option="--functional-test"
                ;;

            --pid)
                shift
                pid_to_watch="$1"
                shift
                ;;

            *)
                break
        esac
    done

    test_name="$1"
    test_state="$2"
    result_file=$(result_file_name "$test_name")
    log_file=$(log_file_name "$test_name")
    daemon_log_file="$(basename "$log_file" .log).dlog"
    tmp_file="/var/tmp/$result_file"


    #
    # If we have a PID we do the uploading until that ends. If not, we just
    # upload once.
    #
    counter=0

    while true; do
        if [ -f "$log_file" ]; then
            #pip-host-control --log "Uploading '$log_file'."
            #printVerbose scp "$log_file" "$PROJECT_TEST_REPORT_URL"
            scp "$log_file" "$PROJECT_TEST_REPORT_URL"
        fi

        upload_report_file_ascii \
            "$test_name"  "$test_state" "$3"

        generate_test_result_info \
            $unit_test_option \
            $functional_test_option \
            --test-name  "$test_name" \
            --test-state "$test_state" \
            >$tmp_file

        #pip-host-control --log "Uploading '$tmp_file'."

        #printVerbose scp "$tmp_file" "$PROJECT_TEST_REPORT_URL"
        scp "$tmp_file" "$PROJECT_TEST_REPORT_URL"

        if [ -z "$unit_test_option" -a \
            -f "$HOME/clustercontrol-enterprise/tests/ft_full.log" ]; then
            #printVerbose scp \
            #    "$HOME/clustercontrol-enterprise/tests/ft_full.log" \
            #    "$PROJECT_TEST_REPORT_URL/$daemon_log_file"
            scp \
                "$HOME/clustercontrol-enterprise/tests/ft_full.log" \
                "$PROJECT_TEST_REPORT_URL/$daemon_log_file"
        fi

        if [ -z "$pid_to_watch" ]; then
            break
        fi

        if ! ps --pid $pid_to_watch; then
            pip-host-control --log "The PID $pid_to_watch ended."
            break
        fi

        # We are not gonna run indefinitely, that is a huge disaster.
        let counter+=10
        if [ $counter -gt 5400 ]; then
            message "One and a half hour elapsed, the watcher will abort now."
            break
        fi

        sleep 10
    done

    rm -f "$tmp_file"
}

function elapsedTimeString()
{
    local start_date="$1"
    local end_date="$(date +%s)"
    local T=$((end_date-start_date))

    printf "%02d:%02d:%02d" \
        "$((T/3600%24))" "$((T/60%60))" "$((T%60))"
}

#
# $1: test name
# $2: the state, "FAILURE", "RUNNING" or "SUCCESS"
#
function generate_test_result_info()
{
    local git_has_local_changes="no"
    local elapsed_time
    local is_unit_test="true"
    local test_name
    local test_state

    while true; do
        case "$1" in 
            --unit-test)
                shift
                is_unit_test="true"
                ;;

            --functional-test)
                shift
                is_unit_test="false"
                ;;

            --test-name)
                shift
                test_name="$1"
                shift
                ;;

            --test-state)
                shift
                test_state="$1"
                shift
                ;;

            *)
                break
        esac
    done

    git_has_local_changes="no"

    if ! git diff-index --quiet HEAD --; then 
        git_has_local_changes="yes"
    fi

    elapsed_time="$(date +%s)"
    let elapsed_time-="$START_EPOCH_TIME"

    cat <<EOF
test_server="$(hostname)"
testname="$test_name"
githash="$GIT_HASH"
gitbranch="$GIT_BRANCH"
gitcommitdate="$GIT_COMMIT_DATE"
githaslocalchanges="$git_has_local_changes"
state="$test_state"
report_file="$(report_file_name $test_name)"
user="$OPTION_USER"
elapsed_time="$elapsed_time"
elapsed_time_string="$(elapsedTimeString $START_EPOCH_TIME)"
test_start_epoch="$START_EPOCH_TIME"
is_unit_test="$is_unit_test"
EOF

    if [ "$S9S_OPTION" ]; then
        echo "project=\"s9s-tools\""
    else
        echo "project=\"clustercontrol-enterprise\""
    fi
}

#
# $1: the test name
# $2: the single os name to test
# $3: the single version to test
#
function run_test()
{
    local test_name="$(basename "$1")"
    local os="$2"
    local version="$3"
    local vendor="$(vendor_to_test)"
    local test_dir
    local return_code
    local tmp_file
    local logfile
    local scriptlogfile

    current_test_name="$test_name"
    logfile=$(log_file_name "$test_name")
    if [ "$S9S_OPTION" ]; then
        test_dir=$(find_s9s_source_directory)
    else
        test_dir=$(find_clustercontrol_source_directory)
    fi

    printVerbose "Entering '$test_dir'..."
    if [ ! -d "$test_dir" ]; then
        pip-host-control --error "Directory '$test_dir' does not exist."
        printError "Directory '$test_dir' does not exist."
        return 1
    else
        pip-host-control --log "Entering '$test_dir'..."
        pushd "$test_dir" >/dev/null 2>/dev/null
    fi
    
    #
    # Notifying the user about a test is starting.
    #
    message "Preparing to run $test_name."
    upload_slog_file

    message "Enabling core file creation."
    echo "core" | sudo tee /proc/sys/kernel/core_pattern
    if [ $? -ne 0 ]; then
        message "Failed: echo 'core' | sudo tee /proc/sys/kernel/core_pattern"
    fi

    for core_file in \
        *core* \
        */*core* \
        $HOME/clustercontrol-enterprise/*core* \
        $HOME/clustercontrol-enterprise/tests/*core*; 
    do
        if [ ! -f "$core_file" ]; then
            continue
        fi

        rm -f "$core_file"
    done

    ulimit -c unlimited
    if [ $? -ne 0 ]; then
        message "Failed: ulimit -c unlimited"
    fi

    #
    # Running the actual test.
    #
    pip-host-control --log "Test name is '${test_name}'."
    case "$test_name" in 
        ft_*.sh)
            cd tests

            #
            # Running the ft_full
            #
            export DOWNLOAD_KEYSERVER="hkp://keyserver.ubuntu.com"
            pushd "$(find_clustercontrol_source_directory)/tests" \
                >/dev/null 2>/dev/null

            if [ -x "./ft_full/ft_full" ]; then
                pip-host-control --log "Running ft_full..."
                message "Running 'ft_full'..."

                echo "Current directory: $(pwd)"
                echo "Sudo environment: $(sudo env)"

                backend_pid=$(pidof ft_full)
                if [ "" == "$backend_pid" ]; then 
                    echo "Starting controller: 'sudo ./ft_full/ft_full'" >ft_full.log
                    # Cleaning up before.
                    echo "sudo rm -rvf /tmp/cmon*"
                    sudo rm -rvf /tmp/cmon*
                    ls -lh /tmp/cmon*
                    echo "sudo rm -rvf /tmp/BACKUP-*"
                    sudo rm -rvf /tmp/BACKUP-*
                    ls -lh /tmp/BACKUP-*

                    sudo ./ft_full/ft_full >>ft_full.log 2>>ft_full.log &
                    backend_pid=$!
                    message "Backend PID is ${backend_pid}."

                    for delay in $(seq 1 100); do
                        if [ -e "/tmp/cmon_test/usermgmt.fifo" ]; then
                            break
                        fi

                        sleep 3
                    done
                else
                    message "ft_full is already running"
                    message "Backend PID is ${backend_pid}."
                    message "PID won't be stored, so ft_full won't be stopped."
                    backend_pid=""
                fi
            else
                pip-host-control --error "The ft_full/ft_full was not found."
                upload_slog_file
                return 1
            fi

            popd >/dev/null 2>/dev/null

            # 
            # Running the test script itself.
            # 
            message "Running '$test_name'..."
            upload_slog_file
            printVerbose "timeout --kill-after=92m 90m ./$test_name \
                --print-commands --reset-config --server=$(hostname) \
                \>\>$logfile 2\>\>$logfile"

            timeout --kill-after=92m 90m ./$test_name \
                --print-commands \
                --reset-config \
                --server=$(hostname) \
                $OPTION_KEEP_NODES \
                >>"$logfile" 2>>"$logfile" &

            test_pid=$!
            message "Test script PID is ${test_pid}."

            #
            # Starting a watcher that keeps uploading the output...
            #
            upload_result_file \
                --functional-test \
                --pid "$test_pid" \
                "$test_name" "RUNNING" $logfile &
            
            watcher_pid=$!
            message "Watcher PID is ${watcher_pid}."
            upload_slog_file

            #
            # Waiting for the test to be ended.
            #
            message "Waiting until the test script ends..."
            wait "$test_pid" 2>/dev/null
            return_code=$?

            pip-host-control --log "Finished ${test_name} ($return_code)."

            message "Waiting for test watcher to end..."
            wait "$watcher_pid" 2>/dev/null

            pushd "$(find_clustercontrol_source_directory)/tests"
            ft_test_ended \
                "$return_code" \
                "$backend_pid" \
                >>ft_full.log 2>>ft_full.log
            popd
            
            #
            # Cleaning up after.
            #
            if [ "$backend_pid" != "" ]; then
                message "Stopping the ft_full backend."
                sudo kill $backend_pid
                sleep 3
                sudo kill -9 $backend_pid
                sleep 3
                sudo pkill ft_full
                sleep 3
                sudo pkill -9 ft_full
                #sudo rm -rvf /tmp/cmon*
                #sudo rm -rvf /tmp/BACKUP-*
            fi

            if [ $return_code -eq 0 ]; then
                upload_result_file \
                    --functional-test \
                    "$test_name" "SUCCESS" $logfile
            else
                upload_result_file \
                    --functional-test \
                    "$test_name" "FAILURE" $logfile
            fi
            ;;

        ft_*)
            #message "WD: $PWD test_name: $test_name."

            if [ -f "Vagrantfile" ]; then
                vagrant destroy -f
                rm -f "Vagrantfile"
            fi

            rm -f test_ssh_key.pub*
            echo "" >ft_full.log 

            pip-host-control --log "Running ${test_name}."
            if [ -f "tests/$test_name/$test_name" ]; then
                message "Entering directory 'tests'..."
                cd tests
            fi

            if [ ! -f "$test_name/$test_name" ]; then
                message "Program $test_name was not found."
                pip-host-control \
                    --status "$test_name is missing." \
                    --error "Program $test_name was not found." \
                    --status "Program $test_name was not found."
                
                pip-host-control --error "  pwd: $PWD"
                    
                return 1
            fi

            version_option=
            if [ "$version" != "" ]; then
                if [ "$version" != "0.0" ]; then
                    version_option="--provider-version=$version"
                fi
            fi
            message "Running $test_name."
            ./$test_name/$test_name \
                --template=headless \
                --vendor="$(vendor_to_test)" \
                $version_option \
                --os="$os" >>"$logfile" 2>>"$logfile" &

            test_pid=$!
            
            upload_result_file \
                --functional-test \
                --pid "$test_pid" \
                "$test_name" "RUNNING" $logfile 

            watcher_pid=$!
            wait "$test_pid"
            return_code=$?

            pip-host-control --log "Finished ${test_name} ($return_code)."
            
            ft_test_ended \
                "$return_code" \
                "" # \ >>ft_full.log 2>>ft_full.log

            if [ $return_code -eq 0 ]; then
                upload_result_file \
                    --functional-test \
                    "$test_name" "SUCCESS" $logfile
            else
                upload_result_file \
                    --functional-test \
                    "$test_name" "FAILURE" $logfile
            fi
            ;;

        ut_*)
            #
            # This is under development.
            #
            cd tests
            upload_result_file \
                --unit-test \
                "$test_name" "RUNNING" $logfile

            #
            # Running the test.
            #
            pip-host-control --log "Running $(basename $test_name)."
            printVerbose "$test_name/$test_name >>$logfile 2>>$logfile"

            if [ ! -f "$test_name/$test_name" ]; then
                echo "File $test_name/$test_name not found in ${PWD}." \
                    >>$logfile 2>>$logfile

                pip-host-control \
                    --error "$test_name/$test_name was not found in $PWD." \
                    --status "Program $test_name was not found."
                
                upload_result_file \
                    --unit-test \
                    "$test_name" "FAILURE" $logfile
                
                return 1
            fi

            message "Running $test_name."
            $test_name/$test_name --color >>$logfile 2>>$logfile
            return_code=$?

            pip-host-control --log "Finished ${test_name} ($return_code)."
            if [ $return_code -eq 0 ]; then
                upload_result_file \
                    --unit-test \
                    "$test_name" "SUCCESS" $logfile
            else
                upload_result_file \
                    --unit-test \
                    "$test_name" "FAILURE" $logfile
            fi
            ;;

        *)
            pip-host-control --error "Unhandled test name '${test_name}'."
    esac
   
    #
    # Uploading the output of the test program as log file.
    #
    if [ -f "$logfile" ]; then
        #printVerbose "scp \"$logfile\" \"$PROJECT_TEST_REPORT_URL\""
        scp "$logfile" "$PROJECT_TEST_REPORT_URL"
        rm -f "$logfile"
    fi
            
    message "Finished running '$test_name' ($return_code)."
    upload_slog_file
}

function install_packages_on_test_server()
{
    if [ -z "$(psql --version)" ]; then
        message "Installing postgresql..."
        sudo apt-get -y --force-yes install postgresql
    fi

    if [ -z "$(bc --version)" ]; then
        message "Installing bc..."
        sudo apt-get -y --force-yes install bc
    fi

    if [ ! -f "/usr/include/hiredis/hiredis.h" ]; then
        message "Installing hiredis..."
        sudo apt-get -y --force-yes install libhiredis-dev
    fi
}

#
# $1: os
# $2: test name
# $3: version
#
function main()
{
    local os="$1"
    local name="$2"
    local version="$3"
    local source_root

    printVerbose "Starting main()."
    pip-host-control \
        --testing \
        --log "Preparing test ($MYNAME ver. $VERSION)." \
        --status "Preparing test."

    install_packages_on_test_server

    #
    # Finding the source root.
    #
    source_root=$(find_clustercontrol_source_directory)
    if [ ! -d "$source_root" ]; then
        printError "Directory '$source_root' does not exist."
        exit 6
    fi
    
    rm -f "$source_root/*.log"
    rm -f "$source_root/tests/*.log"

    #
    # If the user removes this file we cancel the shutdown request, otherwise we
    # will shut down the server at the end of the test.
    #
    if [ "$SHUT_DOWN_AFTER" ]; then
        if [ -z "$DRY" ]; then
            touch ~/cmontest_will_shut_down
        fi
    fi

    #
    # Preparing the clustercontrol source, generating a file holding the test 
    # results.
    #
    printVerbose "Entering directory '$source_root'..."
    pushd "$source_root" >/dev/null 2>/dev/null

    prepare_source \
        --package-name      "clustercontrol" \
        --requested-branch  "$OPTION_GIT_BRANCH" \
        --requested-commit  "$OPTION_GIT_COMMIT"

    GIT_HASH=$(git log -n 1 --pretty=format:"%H")
    GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
    if [ "$GIT_BRANCH" = "HEAD" ]; then
        GIT_BRANCH="$OPTION_GIT_BRANCH"
    GIT_COMMIT_DATE=$(git show -s --format=%ci $GIT_HASH)
    GIT_AUTHOR=$(git log -n 1 --pretty=format:"%aE")
    GIT_SUBJECT=$(git log -n 1 --pretty=format:"%s")
    
    popd >/dev/null 2>/dev/null

    result_file=$(result_file_name "$OPTION_TEST_NAME")
    tmp_file="/var/tmp/$result_file"

    printVerbose "Preliminary test result file: $result_file"
    generate_test_result_info \
        --test-name  "$OPTION_TEST_NAME" \
        --test-state "PREPARING" \
        >$tmp_file

    #printVerbose scp "$tmp_file" "$PROJECT_TEST_REPORT_URL"
    scp "$tmp_file" "$PROJECT_TEST_REPORT_URL"

    compile_source
    if [ $? -ne 0 ]; then
        current_test_name="$OPTION_TEST_NAME"
        
        printVerbose "3487 Failed to compile source."

        generate_test_result_info \
            --test-name  "$OPTION_TEST_NAME" \
            --test-state "FAILURE" \
            >$tmp_file

        #printVerbose scp "$tmp_file" "$PROJECT_TEST_REPORT_URL"
        scp "$tmp_file" "$PROJECT_TEST_REPORT_URL"

        pip-host-control \
            --idle \
            --log    "Failed to compile, idle." \
            --status "Idle."

        upload_slog_file
        return 1
    fi

    #
    # Running the test.
    #
    pip-host-control --log "Entering '$source_root/tests'..."
    pushd "$source_root/tests" >/dev/null 2>/dev/null
    
    for os in $os; do 
        for version in $version; do
            for test_name in $name; do
                run_test "$test_name" "$os" "$version"
            done
        done
    done
    
    popd >/dev/null 2>/dev/null

    pip-host-control \
        --idle \
        --log    "Finished with tests, idle." \
        --status "Idle."

    #
    # If the "shutdown after the test" is requested and the user did not delete
    # the shutdown file we will now shut down the computer.
    #
    if [ "$SHUT_DOWN_AFTER" -a -f ~/cmontest_will_shut_down ]; then
        rm -f ~/cmontest_will_shut_down
        pip-host-control --shutdown
    fi
}

#
# $1: the server name
#
function is_server_running_ssh()
{
    local serverName="$1"
    local isOK

    isOk=$(ssh -o ConnectTimeout=1 -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o LogLevel=quiet "$serverName" 2>/dev/null -- echo OK)
    if [ "$isOk" == "OK" ]; then
        return 0
    fi

    return 1
}

function print_main_screen()
{
    local server
    local host_state
    local mycolumns=0

    for server in $SERVER; do
        host_state="${REMOTE_SERVER_STATE[$server]}"
        if [ -z "$host_state" ]; then
            host_state="-"
        fi

        printf "%8s:%-10s " "$server" "$host_state" >&2
        let mycolumns+=1
        if [ $mycolumns -gt 3 ]; then
            echo "" >&2
            mycolumns=0
        fi
    done

    echo "" >&2
}

LAST_USED_SERVER=""

#
#
#
function find_idle_server()
{
    local server
    local host_state
   
    #printVerbose "find_idle_server()"

    for server in $SERVER; do
        lock_file=$(lockFile)

        if [ "$LAST_USED_SERVER" ]; then
            if [ "$LAST_USED_SERVER" == "$server" ]; then
                LAST_USED_SERVER=""
            fi

            continue
        fi

        if ! is_server_running_ssh "$server"; then
            printVerbose "Server '$server' is off-line."
            REMOTE_SERVER_STATE[$server]="OFF-LINE"
            continue
        fi

        printVerbose \
            ssh -o UserKnownHostsFile=/dev/null \
                -o StrictHostKeyChecking=no \
                -o LogLevel=quiet \
                "$server" -- pip-cmon-test --pid

        other_pid=$( \
            ssh -o UserKnownHostsFile=/dev/null \
                -o StrictHostKeyChecking=no \
                -o LogLevel=quiet \
                "$server" -- pip-cmon-test --pid)

        printVerbose "server     : '$server'"
        printVerbose "lock_file  : '$lock_file'"
        printVerbose "other_pid  : '$other_pid'"
        if [ "$other_pid" ]; then
            REMOTE_SERVER_STATE[$server]="TESTING "
            continue
        fi

        LAST_USED_SERVER="$server"
        echo "$server"
        break
    done

    LAST_USED_SERVER="$server"
}

function wait_for_idle_server()
{
    local idle_server

    printVerbose "Waiting for an idle server..."
    while true; do
        idle_server=$(find_idle_server)
  
        # Finding a server that is idle and ready to execute a test.
        if [ "$idle_server" ]; then
            echo "$idle_server"
            return 0
        fi

        sleep 3
    done
}

function run_tests_remote()
{
    local os
    local version
    local vendor
    local idle_server
    local test_name
    local no_git_pull_option
    local no_compile_option
    declare -A already_compiled

    printVerbose "os_to_test: $(os_to_test)"
    printVerbose "version_to_test: $(version_to_test)"
    printVerbose "vendor_to_test: $(vendor_to_test)"
    printVerbose "OPTION_TEST_NAME: $(echo "$OPTION_TEST_NAME" | tr ',' ' ')"

    for os in $(os_to_test); do 
        for version in $(version_to_test); do
            for vendor in $(vendor_to_test); do
                for test_name in $(echo "$OPTION_TEST_NAME" | tr ',' ' '); do
                    idle_server=$(wait_for_idle_server)
                    no_git_pull_option="$NO_GIT_PULL_OPTION"
                    no_compile_option="$NO_COMPILE_OPTION"

                    if [ "${already_compiled[$idle_server]}" ]; then
                        no_git_pull_option="--no-git-pull"
                        no_compile_option="--no-compile"
                    fi

                    echo "-------------------------------------"
                    echo -e "idle_server : $(STR_GREEN "$idle_server")"
                    echo -e "test        : '$test_name'"
                    echo -e "compiled    : '${already_compiled[$idle_server]}'"

                    pip-host-control --log "Starting test on '$idle_server'."
                    ssh -o UserKnownHostsFile=/dev/null \
                        -o StrictHostKeyChecking=no \
                        -o LogLevel=quiet \
                        $idle_server -- nohup pip-cmon-test \
                            $no_git_pull_option \
                            $no_compile_option \
                            $S9S_OPTION \
                            $VERBOSE_OPTION \
                            $OPTION_KEEP_NODES \
                            --os=$os \
                            --vendor=$vendor \
                            --sqlversion=$version \
                            --test="$test_name" \
                            --git-branch="$OPTION_GIT_BRANCH" \
                            --git-commit="$OPTION_GIT_COMMIT"
                            # Uncomment below if many test server are in use
                            # and there are too many messages on the konsole
                            #>/dev/null 2>/dev/null &

                    if [ -n "$WAIT_OPTION" ]; then
                        printVerbose "Waiting until the test ends."
                        waitForProcessesToEnd 0
                        printVerbose "Test ended..."
                    fi

                    already_compiled[$idle_server]="yes"
                    sleep 2
                done
            done
        done
    done
}

if [ "$OPTION_UNIT_TESTS" ]; then
    printVerbose "OPTION_UNIT_TESTS is true"
    if [ "$S9S_OPTION" ]; then
        OPTION_TEST_NAME+="ut_library ut_s9sbackup ut_s9sconfigfile "
        OPTION_TEST_NAME+="ut_s9sgraph ut_s9soptions ut_s9srpcclient "
        OPTION_TEST_NAME+="ut_s9surl ut_s9svariantmap ut_s9saccount "
        OPTION_TEST_NAME+="ut_s9scluster ut_s9sdatetime ut_s9snode "
        OPTION_TEST_NAME+="ut_s9sregexp ut_s9sstring ut_s9svariant "
    else
        directory=$(find_clustercontrol_source_directory)
        if [ -d "$directory/tests" ]; then
            pushd "$directory/tests"
            OPTION_TEST_NAME="$(ls -d ut_*)"
            popd
        fi
        
        if [ -z "$OPTION_TEST_NAME" ]; then
            printError "Could not find clustercontrol unit tests."
            exit 6
        fi
    fi
fi

if [ "$OPTION_FUNCTIONAL_TESTS" ]; then
    printVerbose "OPTION_FUNCTIONAL_TESTS is true"
    if [ "$S9S_OPTION" ]; then
        directory=$(find_s9s_source_directory)
        printVerbose "  directory: $directory" 

        if [ -d "$directory/tests" ]; then
            pushd "$directory/tests" >/dev/null 2>/dev/null
            OPTION_TEST_NAME="$(ls ft_*.sh)"
            popd >/dev/null 2>/dev/null
        fi

        if [ -z "$OPTION_TEST_NAME" ]; then
            printError "Could not find s9s functional tests."
            exit 6
        fi
    fi
fi


if [ "$OPTION_PID" ]; then
    printVerbose "OPTION_PID is true"
    #
    # Printing the PID of the running test script and exiting.
    #
    lock_file=$(lockFile)
    if [ -f "$lock_file" ]; then
        pid=$(cat "$lock_file")
        if [[ -e /proc/${pid} ]]; then
            echo "$pid"
            exit 0
        fi

        rm -f "$lock_file"
        exit 0
    fi

    exit 1
elif [ "$SERVER" ]; then
    printVerbose "OPTION_SERVER is true"
    #
    # Running the tests on multiple remote servers.
    #
    pip-host-control --testing --log="--------------------------------------"
    pip-host-control --testing --log="Running tests..."
    pip-host-control --status "Testing..."

    run_tests_remote
    #waitForProcessesToEnd 
    pip-host-control --idle --status="Idle."
else
    checkOtherInstances
    printVerbose "checkOtherInstances : $?"

    main "$(os_to_test)" "$(test_name_to_test)" "$(version_to_test)"
fi


